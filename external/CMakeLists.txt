set(BUILD_SHARED_LIBS YES CACHE BOOL "")

if(BUILD_ELASTICLIENT_TESTS)
    if(USE_SYSTEM_HTTPMOCKSERVER)
        find_package(HTTPMockServer REQUIRED)
        if(NOT HTTPMOCKSERVER_FOUND)
            message(FATAL_ERROR "HTTPMockServer library not found.")
        endif()
    else()
        add_subdirectory(httpmockserver)
        set(HTTPMOCKSERVER_FOUND TRUE)
    endif()

    set(HTTPMOCKSERVER_FOUND ${HTTPMOCKSERVER_FOUND} CACHE INTERNAL "")
    set(HTTPMOCKSERVER_LIBRARIES ${HTTPMOCKSERVER_LIBRARIES} CACHE INTERNAL "")
    set(HTTPMOCKSERVER_INCLUDE_DIRS ${HTTPMOCKSERVER_INCLUDE_DIRS} CACHE INTERNAL "")

    if(NOT GTEST_FOUND) # May some lib already brings GTest lib.
        if(USE_SYSTEM_GTEST)
            find_package(GTest REQUIRED)
        else()
            add_subdirectory(googletest)
            set(GTEST_FOUND TRUE)
            set(GTEST_LIBRARIES gtest)
            set(GTEST_MAIN_LIBRARIES gtest_main)
            set(GTEST_BOTH_LIBRARIES gtest gtest_main)
            set(GTEST_INCLUDE_DIRS ${gtest_SOURCE_DIR}/include)
        endif()
    endif()
    set(GTEST_FOUND ${GTEST_FOUND} CACHE INTERNAL "")
    set(GTEST_LIBRARIES ${GTEST_LIBRARIES} CACHE INTERNAL "")
    set(GTEST_MAIN_LIBRARIES ${GTEST_MAIN_LIBRARIES} CACHE INTERNAL "")
    set(GTEST_BOTH_LIBRARIES ${GTEST_BOTH_LIBRARIES} CACHE INTERNAL "")
    set(GTEST_INCLUDE_DIRS ${GTEST_INCLUDE_DIRS} CACHE INTERNAL "")
endif()

if(USE_SYSTEM_JSONCPP)
    find_package(JsonCpp REQUIRED)
    if(NOT JSONCPP_FOUND)
        message(FATAL_ERROR "JsonCpp library not found.")
    endif()
else(NOT JSONCPP_FOUND) # May some lib already brings JsonCpp lib.
    set(JSONCPP_WITH_TESTS NO CACHE BOOL "")
    add_subdirectory(jsoncpp)
    set(JSONCPP_FOUND TRUE)
    set(JSONCPP_LIBRARY jsoncpp)
    set(JSONCPP_INCLUDE_DIRS ${jsoncpp_SOURCE_DIR}/include)
endif()
set(JSONCPP_FOUND ${JSONCPP_FOUND} CACHE INTERNAL "")
set(JSONCPP_LIBRARIES ${JSONCPP_LIBRARY} CACHE INTERNAL "")
set(JSONCPP_INCLUDE_DIRS ${JSONCPP_INCLUDE_DIRS} CACHE INTERNAL "")

if(USE_SYSTEM_CPR)
    find_package(CPR REQUIRED)
    if(NOT CPR_FOUND)
        message(FATAL_ERROR "CPR library not found.")
    endif()
elseif(NOT CPR_FOUND) # May some lib already brings CPR lib.
    set(BUILD_CPR_TESTS NO CACHE BOOL "")
    find_package(CURL)
    if(CURL_FOUND)
        set(USE_SYSTEM_CURL YES CACHE BOOL "")
    endif()
    add_subdirectory(cpr)
endif()
set(CPR_FOUND ${CPR_FOUND} CACHE INTERNAL "")
set(CPR_LIBRARIES ${CPR_LIBRARIES} CACHE INTERNAL "")
set(CPR_INCLUDE_DIRS ${CPR_INCLUDE_DIRS} CACHE INTERNAL "")

IF(ELASTICLIENT_WITH_CMAKE_PACKAGE AND NOT USE_SYSTEM_CPR)
  install(DIRECTORY "${CPR_INCLUDE_DIRS}/cpr" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
  SET(CPR_IMPORT_DIR ${CMAKE_BINARY_DIR}/lib/)
  install(DIRECTORY ${CPR_IMPORT_DIR}
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        FILES_MATCHING PATTERN "libcpr.*")
ENDIF()
